generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model workspace {
  groupId           Int                        @id @unique
  adjustments       ActivityAdjustment[]
  activityHistory   ActivityHistory[]
  activityResets    ActivityReset[]
  activitySessions  ActivitySession[]
  allies            Ally[]
  quotas            Quota[]
  sessionTypes      SessionType[]
  apiKey            apiKey[]
  config            config[]
  documents         document[]
  inactivityNotices inactivityNotice[]
  ranks             rank[]
  roles             role[]
  userBook          userBook[]
  wallposts         wallPost[]
  externalServices  workspaceExternalServices?
  members           workspaceMember[]
}

model config {
  id               Int       @id @default(autoincrement())
  key              String
  value            Json
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspaceGroupId Int
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model instanceConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  userid               BigInt               @id @unique
  isOwner              Boolean?
  picture              String?
  username             String?
  registered           Boolean?
  birthdayDay          Int?
  birthdayMonth        Int?
  adjustmentsMade      ActivityAdjustment[] @relation("AdjustmentActor")
  adjustmentsReceived  ActivityAdjustment[] @relation("AdjustmentUser")
  activityHistory      ActivityHistory[]
  activityResets       ActivityReset[]
  activitySessions     ActivitySession[]
  sessions             Session[]
  sessionLogsAsActor   SessionLog[]         @relation("SessionLogActor")
  sessionLogsAsTarget  SessionLog[]         @relation("SessionLogTarget")
  sessionNotes         SessionNote[]
  allyVisits           allyVisit[]
  apiKey               apiKey[]
  documents            document[]
  inactivityNotices    inactivityNotice[]
  ranks                rank[]
  sessionsRoles        sessionUser[]
  writtenBooks         userBook[]           @relation("bookAdmin")
  book                 userBook[]           @relation("bookUser")
  info                 userInfo?
  wallPosts            wallPost[]
  workspaceMemberships workspaceMember[]
  Ally                 Ally[]               @relation("AllyTouser")
  roles                role[]               @relation("roleTouser")
}

model userInfo {
  userid       BigInt  @id
  passwordhash String?
  tfa          String?
  user         user    @relation(fields: [userid], references: [userid])
}

model QuotaRole {
  quotaId String @db.Uuid
  roleId  String @db.Uuid
  quota   Quota  @relation(fields: [quotaId], references: [id])
  role    role   @relation(fields: [roleId], references: [id])

  @@unique([quotaId, roleId])
}

model role {
  id               String        @id @unique @default(uuid()) @db.Uuid
  permissions      String[]
  isOwnerRole      Boolean?      @default(false)
  workspaceGroupId Int
  name             String
  groupRoles       Int[]
  quotaRoles       QuotaRole[]
  workspace        workspace     @relation(fields: [workspaceGroupId], references: [groupId])
  SessionType      SessionType[] @relation("SessionTypeTorole")
  documents        document[]    @relation("documentTorole")
  members          user[]        @relation("roleTouser")
}

model wallPost {
  id               Int       @id @default(autoincrement())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspaceGroupId Int
  authorId         BigInt
  image            String?
  author           user      @relation(fields: [authorId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model SessionType {
  id               String     @id @unique @default(uuid()) @db.Uuid
  name             String
  gameId           BigInt?
  allowUnscheduled Boolean
  workspaceGroupId Int
  statues          Json[]
  slots            Json[]
  description      String?
  sessions         Session[]
  workspace        workspace  @relation(fields: [workspaceGroupId], references: [groupId])
  schedule         schedule[]
  hostingRoles     role[]     @relation("SessionTypeTorole")
}

model schedule {
  id            String      @id @unique @default(uuid()) @db.Uuid
  Days          Int[]
  Hour          Int
  Minute        Int
  sessionTypeId String      @db.Uuid
  sessions      Session[]
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])
}

model sessionUser {
  userid    BigInt
  sessionid String  @db.Uuid
  roleID    String
  slot      Int
  session   Session @relation(fields: [sessionid], references: [id])
  user      user    @relation(fields: [userid], references: [userid])

  @@id([userid, sessionid])
}

model Session {
  id            String        @id @unique @default(uuid()) @db.Uuid
  ownerId       BigInt?
  date          DateTime
  startedAt     DateTime?
  ended         DateTime?
  sessionTypeId String        @db.Uuid
  scheduleId    String?       @db.Uuid
  name          String?
  type          String?
  owner         user?         @relation(fields: [ownerId], references: [userid])
  schedule      schedule?     @relation(fields: [scheduleId], references: [id])
  sessionType   SessionType   @relation(fields: [sessionTypeId], references: [id])
  logs          SessionLog[]
  notes         SessionNote[]
  users         sessionUser[]
}

model SessionNote {
  id        String   @id @unique @default(uuid()) @db.Uuid
  sessionId String   @db.Uuid
  authorId  BigInt
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    user     @relation(fields: [authorId], references: [userid])
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model SessionLog {
  id        String   @id @unique @default(uuid()) @db.Uuid
  sessionId String   @db.Uuid
  actorId   BigInt
  targetId  BigInt?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  actor     user     @relation("SessionLogActor", fields: [actorId], references: [userid])
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  target    user?    @relation("SessionLogTarget", fields: [targetId], references: [userid])
}

model ActivitySession {
  id               String    @id @unique @default(uuid()) @db.Uuid
  userId           BigInt
  active           Boolean
  startTime        DateTime
  endTime          DateTime?
  idleTime         BigInt?
  workspaceGroupId Int
  messages         Int?
  universeId       BigInt?
  sessionMessage   String?
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model apiKey {
  id               String    @id @unique
  name             String
  key              String    @unique
  lastUsed         DateTime?
  createdAt        DateTime  @default(now())
  expiresAt        DateTime?
  workspaceGroupId Int
  createdById      BigInt
  createdBy        user      @relation(fields: [createdById], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model inactivityNotice {
  id               String    @id @unique @default(uuid()) @db.Uuid
  userId           BigInt
  startTime        DateTime
  endTime          DateTime?
  reason           String
  approved         Boolean?  @default(false)
  reviewed         Boolean?  @default(false)
  workspaceGroupId Int
  revoked          Boolean?  @default(false)
  reviewComment    String?
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model document {
  id               String    @id @unique @default(uuid()) @db.Uuid
  name             String
  content          Json
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  ownerId          BigInt
  workspaceGroupId Int
  owner            user      @relation(fields: [ownerId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
  roles            role[]    @relation("documentTorole")
}

model userBook {
  id               String    @id @unique @default(uuid()) @db.Uuid
  userId           BigInt
  type             String
  reason           String
  adminId          BigInt
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspaceGroupId Int
  rankBefore       Int?
  rankAfter        Int?
  rankNameBefore   String?
  rankNameAfter    String?
  admin            user      @relation("bookAdmin", fields: [adminId], references: [userid])
  user             user      @relation("bookUser", fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model rank {
  userId           BigInt
  rankId           BigInt
  workspaceGroupId Int
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@id([userId, workspaceGroupId])
}

model Quota {
  id               String      @id @default(uuid()) @db.Uuid
  type             String
  value            Int
  workspaceGroupId Int
  name             String
  workspace        workspace   @relation(fields: [workspaceGroupId], references: [groupId])
  quotaRoles       QuotaRole[]
}

model Ally {
  workspaceGroupId Int
  name             String
  icon             String
  groupId          String
  notes            String[]
  id               String      @id @unique @default(uuid()) @db.Uuid
  workspace        workspace   @relation(fields: [workspaceGroupId], references: [groupId])
  allyVisits       allyVisit[]
  reps             user[]      @relation("AllyTouser")
}

model allyVisit {
  id     String   @id @unique @default(uuid()) @db.Uuid
  allyId String   @db.Uuid
  hostId BigInt
  time   DateTime
  name   String
  ally   Ally     @relation(fields: [allyId], references: [id])
  host   user     @relation(fields: [hostId], references: [userid])
}

model workspaceMember {
  workspaceGroupId Int
  userId           BigInt
  joinDate         DateTime? @default(now())
  birthdayDay      Int?
  birthdayMonth    Int?
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@id([workspaceGroupId, userId])
  @@index([userId])
}

model ActivityAdjustment {
  id               String    @id @default(uuid()) @db.Uuid
  userId           BigInt
  actorId          BigInt
  workspaceGroupId Int
  minutes          Int
  reason           String?
  createdAt        DateTime  @default(now())
  actor            user      @relation("AdjustmentActor", fields: [actorId], references: [userid])
  user             user      @relation("AdjustmentUser", fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@index([userId])
  @@index([actorId])
  @@index([workspaceGroupId])
}

model ActivityHistory {
  id               String    @id @default(uuid()) @db.Uuid
  userId           BigInt
  workspaceGroupId Int
  periodStart      DateTime
  periodEnd        DateTime
  minutes          Int
  messages         Int
  sessionsHosted   Int
  sessionsAttended Int
  idleTime         Int
  wallPosts        Int       @default(0)
  quotaProgress    Json
  createdAt        DateTime  @default(now())
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@index([userId])
  @@index([workspaceGroupId])
  @@index([periodStart])
  @@index([periodEnd])
}

model ActivityReset {
  id                  String    @id @default(uuid()) @db.Uuid
  workspaceGroupId    Int
  resetById           BigInt
  resetAt             DateTime  @default(now())
  previousPeriodStart DateTime?
  previousPeriodEnd   DateTime?
  resetBy             user      @relation(fields: [resetById], references: [userid])
  workspace           workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@index([workspaceGroupId])
  @@index([resetAt])
}

model workspaceExternalServices {
  id               Int       @id @default(autoincrement())
  workspaceGroupId Int       @unique
  rankingProvider  String?
  rankingToken     String?
  rankingWorkspaceId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@index([workspaceGroupId])
}